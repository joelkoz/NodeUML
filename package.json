{
  "name": "nodeuml",
  "displayName": "NodeUML",
  "description": "Create UML class diagrams and generate code with NodeMDA",
  "publisher": "joelkoz",
  "icon": "media/nodeuml-icon.png",
  "version": "0.9.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/jkoz/nodeuml.git"
  },
  "bugs": {
    "url": "https://github.com/jkoz/nodeuml/issues"
  },
  "homepage": "https://github.com/jkoz/nodeuml#readme",  
  "engines": {
    "vscode": "^1.94.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [],
  "main": "./dist/extension.js",
  "contributes": {
    "configuration": {
      "title": "NodeUML Code Generator",
      "properties": {
        "nodeuml.nodemda.status": {
          "type": "string",
          "default": "Unknown",
          "markdownDescription": "NodeMDA Status: [Check Status](command:nodeuml.checkNodeMDA) | [Install NodeMDA and NodeUML](command:nodeuml.installNodeMDA)",
          "description": "Status of NodeMDA and NodeUML reader.",
          "scope": "resource"
        },
        "nodeuml.nodemda.targetPlatform": {
          "type": "string",
          "default": "",
          "markdownDescription": "Target platform for code generation. [Select Target Platform](command:nodeuml.selectTargetPlatform)",
          "scope": "resource"
        },
        "nodeuml.nodemda.forceOverwrite": {
          "type": "boolean",
          "default": false,
          "description": "Force overwrite of existing files during code generation.",
          "scope": "resource"
        }
      }
    },    
    "viewsContainers": {
      "activitybar": [
        {
          "id": "umlSidebar",
          "title": "UML Tools",
          "icon": "media/diagram-icon.svg"
        }
      ]
    },
    "views": {
      "umlSidebar": [
        {
          "id": "modelExplorer",
          "name": "Model Explorer"
        },
        {
          "id": "propertiesView",
          "name": "Model Properties",
          "type": "webview"
        }
      ]
    },
    "customEditors": [
      {
        "viewType": "nodeuml.umlDiagramEditor",
        "displayName": "UML Diagram Editor",
        "selector": [
          {
            "filenamePattern": "*.numl"
          }
        ]
      }
    ],
    "commands": [
      {
        "command": "nodeuml.generateCode",
        "title": "NodeUML: Generate source code"
      },

      {
        "command": "nodeuml.generateCodeFromMenu",
        "title": "Generate code from UML",
        "when": false
      },

      {
        "command": "nodeuml.configure",
        "title": "NodeUML: Configure code generator"
      },

      {
        "command": "nodeuml.selectTargetPlatform",
        "title": "NodeUML: Select target platform for code generation"
      },

      {
        "command": "nodeuml.installNodeMDA",
        "title": "NodeUML: Install NodeMDA"
      },

      {
        "command": "nodeuml.checkNodeMDA",
        "title": "Check NodeMDA installation",
        "when": false
      },

      {
        "command": "nodeuml.refreshModel",
        "title": "Refresh Model Explorer",
        "when": false
      },
      {
        "command": "nodeuml.createUMLModel",
        "title": "New UML Model"
      },
      {
        "command": "nodeuml.addClass",
        "title": "Class",
        "when": false
      },
      {
        "command": "nodeuml.addPackage",
        "title": "Package",
        "when": false
      },
      {
        "command": "nodeuml.addAttribute",
        "title": "Attribute",
        "when": false
      },
      {
        "command": "nodeuml.addOperation",
        "title": "Operation",
        "when": false
      },
      {
        "command": "nodeuml.addParameter",
        "title": "Parameter",
        "when": false
      },
      {
        "command": "nodeuml.addProfile",
        "title": "Profile",
        "when": false
      },
      {
        "command": "nodeuml.addDataType",
        "title": "Data type",
        "when": false
      },
      {
        "command": "nodeuml.addTagDef",
        "title": "Tag definition",
        "when": false
      },
      {
        "command": "nodeuml.addStereotype",
        "title": "Stereotype",
        "when": false
      },
      {
        "command": "nodeuml.addActor",
        "title": "Actor",
        "when": false
      },
      
      {
        "command": "nodeuml.updateProperty",
        "title": "Update Property",
        "when": false
      },

      {
        "command": "nodeuml.removeNode",
        "title": "Remove",
        "when": false
      },
      {
        "command": "nodeuml.addToDiagram",
        "title": "Add to diagram",
        "when": false
      },


      {
        "command": "nodeuml.removeById",
        "title": "Remove element by meta Id",
        "when": false
      },
      {
        "command": "nodeuml.createNewMeta",
        "title": "Create new UML element",
        "when": false
      },
      {
        "command": "nodeuml.updateMetaProperties",
        "title": "Updates one or more properties on a meta element",
        "when": false
      },
      {
        "command": "nodeuml.exportProfile",
        "title": "Export profile"
      },
      {
        "command": "nodeuml.importProfile",
        "title": "Import profile"
      }      
    ],
    "keybindings": [
      {
        "command": "nodeuml.saveUMLModel",
        "key": "cmd+s",
        "when": "webviewPanel == umlDiagramEditor"
      }
    ],
    "menus": {
      "file/newFile": [
        {
          "command": "nodeuml.createUMLModel",
          "group": "umlTools",
          "args": {
            "uri": "${resourceUri}"
          }
        }
      ],
      "explorer/context": [
        {
          "command": "nodeuml.createUMLModel",
          "group": "umlTools",
          "when": "filesExplorerFocus",
          "args": {
            "uri": "${resourceUri}"
          }
        },
        {
          "command": "nodeuml.generateCodeFromMenu",
          "group": "umlTools",
          "when": "filesExplorerFocus",
          "args": {
            "uri": "${resourceUri}"
          }
        }
      ],
      "view/item/context": [
        {
          "submenu": "uml.addElement",
          "group": "umlTools",
          "view": "modelExplorer",
          "when": "viewItem =~ /UML.*/ || viewItem == Profiles"
        },
        {
          "command": "nodeuml.removeNode",
          "label": "Remove Element",
          "group": "umlTools",
          "when": "view == modelExplorer && (viewItem =~ /UML.*/ || viewItem == Profiles)"
        },
        {
          "command": "nodeuml.addToDiagram",
          "label": "Add to diagram",
          "group": "umlTools",
          "when": "view == modelExplorer && (viewItem == UMLClass || viewItem == UMLActor)"
        },
        {
          "command": "nodeuml.generateCodeFromMenu",
          "label": "Generate code",
          "group": "umlTools",
          "when": "view == modelExplorer && (viewItem == UMLModel || viewItem == Project)"
        },
        {
          "command": "nodeuml.exportProfile",
          "label": "Export profile",
          "group": "umlTools",
          "when": "view == modelExplorer && viewItem == UMLProfile"
        },
        {
          "command": "nodeuml.importProfile",
          "label": "Import profile",
          "group": "umlTools",
          "when": "view == modelExplorer && viewItem == Profiles"
        }        
      ],
      "uml.addElement": [
        {
          "command": "nodeuml.addClass",
          "when": "viewItem == UMLModel || viewItem == UMLPackage",
          "group": "umlTools"
        },
        {
          "command": "nodeuml.addPackage",
          "when": "viewItem == UMLModel || viewItem == UMLPackage || viewItem == UMLProfile",
          "group": "umlTools"
        },
        {
          "command": "nodeuml.addAttribute",
          "when": "viewItem == UMLClass",
          "group": "umlTools"
        },
        {
          "command": "nodeuml.addOperation",
          "when": "viewItem == UMLClass",
          "group": "umlTools"
        },
        {
          "command": "nodeuml.addParameter",
          "when": "viewItem == UMLOperation",
          "group": "umlTools"
        },
        {
          "command": "nodeuml.addProfile",
          "when": "viewItem == Profiles",
          "group": "umlTools"
        },
        {
          "command": "nodeuml.addDataType",
          "when": "viewItem == UMLProfile || viewItem == UMLPackage || viewItem == UMLModel",
          "group": "umlTools"
        },
        {
          "command": "nodeuml.addTagDef",
          "when": "viewItem == UMLProfile || viewItem == UMLPackage || viewItem == UMLModel",
          "group": "umlTools"
        },
        {
          "command": "nodeuml.addStereotype",
          "when": "viewItem == UMLProfile || viewItem == UMLPackage || viewItem == UMLModel",
          "group": "umlTools"
        },
        {
          "command": "nodeuml.addActor",
          "when": "viewItem == UMLProfile || viewItem == UMLPackage || viewItem == UMLModel",
          "group": "umlTools"
        }
      ]
    },
    "submenus": [
      {
        "id": "uml.addElement",
        "label": "Add Element"
      }
    ]
  },
  "files": [
    "dist",
    "media",
    "src",
    "node_modules"
  ],
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.9",
    "@types/node": "20.x",
    "@types/uuid": "^10.0.0",
    "@types/vscode": "^1.94.0",
    "@typescript-eslint/eslint-plugin": "^8.10.0",
    "@typescript-eslint/parser": "^8.7.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "eslint": "^9.13.0",
    "ts-loader": "^9.5.1",
    "typescript": "^5.6.3",
    "webpack": "^5.95.0",
    "webpack-cli": "^5.1.4"
  },
  "dependencies": {
    "@joint/core": "^4.0.4",
    "awesomplete": "^1.1.7",
    "sweetalert2": "^11.14.5",
    "uuid": "^10.0.0"
  }
}
